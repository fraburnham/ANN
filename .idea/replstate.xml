<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1420579766830">{:repl-history {:ide [], :local [&quot;(p/generate-swarm '([-1 1] [-1 1]) 2 (partial apply +))&quot; &quot;(p/generate-swarm (build-space 12) 40 (partial fitness training-in training-out structure))&quot; &quot;(defn random [low high]\n  (+ (rand (+ high (Math/abs low))) low))\n(def space (build-space 12))\n(map (fn [[min max]] (random min max)) space)&quot; &quot;(def swarm)&quot; &quot;(def swarm [(map (fn [[min max]] (random min max)) space)])&quot; &quot;(def position (map (fn [[min max]] (random min max)) space))&quot; &quot;(p/random-velocity space position)&quot; &quot;(def velocity (p/random-velocity space position))&quot; &quot;(def particle [1 velocity position])&quot; &quot;particle&quot; &quot;(def swarm [particle])&quot; &quot;swarm&quot; &quot;(p/generate-swarm (build-space 2) 3 (partial apply +))&quot; &quot;(p/update-fitness swarm (partial training-in training-out structure))&quot; &quot;(pprint cost)&quot; &quot;(clojure.pprint/pprint cost)&quot; &quot;(clojure.pprint/pprint n/cost)&quot; &quot;(n/cost '(0 1 1 0) '(0.5111368685774282 0.5006274376318193 0.5145844130883996 0.5037663015476643))&quot; &quot;(n/cost '((0) (1) (1) (0)) '((0.5111368685774282) (0.5006274376318193) (0.5145844130883996) (0.5037663015476643)))&quot; &quot;(def training-out (partition 1 training-out))&quot; &quot;training-out&quot; &quot;(require [nn.core :as n])&quot; &quot;(require '[nn.core :as n])&quot; &quot;(p/update-fitness swarm (partial fitness training-in training-out structure))&quot; &quot;(def training-out '((0) (1) (1) (0)))&quot; &quot;(def structure '(3 7 1))&quot; &quot;(n/cost '((0) (1) (1) (0)) \n        '((0.5968203084089552) \n           (0.5363851776320748) \n           (0.5964293747559468) \n           (0.5358556216071677)))&quot; &quot;(pso-nn training-in training-out structure 1000 0.1 100)&quot; &quot;(pso-nn training-in training-out structure 10 0.01 100)&quot; &quot;(pso-nn training-in training-out structure 10 0.7 100)&quot; &quot;(pso-nn training-in training-out structure 10 0.5 100)&quot; &quot;(pso-nn training-in training-out structure 1000 0.1 10)&quot; &quot;(pso-nn training-in training-out structure 100 0.1 10)&quot; &quot;(def structure '(3 20 1))&quot; &quot;(pso-nn training-in training-out structure 10 0.1 100)&quot; &quot;(pso-nn training-in training-out structure 40 0.1 50)&quot; &quot;(pso-nn training-in training-out structure 40 0.1 500)&quot; &quot;(def training-in '((1 0 0) (1 1 0) (1 0 1) (1 1 1)))&quot; &quot;(def training-out '((1) (0) (0) (1)))&quot; &quot;(pso-nn training-in training-out structure 40 0.1 300)&quot; &quot;(n/neuron '(1 1 0) '(((-30 20 20))))&quot; &quot;(n/neuron '(1 1 0) '((-30 20 20)))&quot; &quot;(n/neuron '(1 1 0) '(-30 20 20))&quot; &quot;(n/neuron '(1 1 1) '(-0.3 0.2 0.2))&quot; &quot;(n/neuron '(1 1 1) '(-3 2 2))&quot; &quot;(n/neuron '(1 1 1) '(-30 20 20))&quot; &quot;(pso-nn training-in training-out structure 40 0.1 30)&quot; &quot;(pso-nn training-in training-out structure 4 0.1 1)&quot; &quot;structure&quot; &quot;(- 1 -1.4)&quot; &quot;(-1 2)&quot; &quot;(- 1 2)&quot; &quot;(n/cost '((1) (0) (0) (1)) '((-1.5034292467957172E-23) (-3.6318596033901026E-63) (-1.0510712334431793E-35) (-2.5390906563535884E-75)))&quot; &quot;(pso-nn training-in training-out structure 40 0.1 100)&quot; &quot;(n/neuron '(1 1 1) '(35.33481946150896 -65.19100823522373 -55.933778985391555))&quot; &quot;(n/neuron '(1 1 0) '(35.33481946150896 -65.19100823522373 -55.933778985391555))&quot; &quot;(pso-nn training-in training-out structure 40 0.1 1000)&quot; &quot;(pso-nn training-in training-out structure 100 0.1 1000)&quot; &quot;(int (n/neuron '(1 1 1) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45)))&quot; &quot;(int (n/neuron '(1 1 0) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45)))&quot; &quot;(int 0.6)&quot; &quot;(int 0.7)&quot; &quot;(int 0.9)&quot; &quot;(n/neuron '(1 1 0) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45))&quot; &quot;(n/neuron '(1 1 1) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45))&quot; &quot;(n/neuron '(1 0 0) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45))&quot; &quot;(pso-nn training-in training-out structure 100 0.1 10000)&quot; &quot;(pso-nn training-in training-out structure 100 0.1 2000)&quot; &quot;(pso-nn training-in training-out structure 100 0.1 100)&quot; &quot;(pso-nn training-in training-out structure 300 0.1 100)&quot; &quot;(pso-nn training-in training-out structure 100 0.01 100)&quot; &quot;(def t-in '((1 1 1) (1 0 0) (1 0 1) (1 1 0)))&quot; &quot;(def t-out '((1) (1) (0) (0)))&quot; &quot;(def structure '(3 1))&quot; &quot;(def structure '(3 3 1))&quot; &quot;(position-to-nn '(-175.0 -150.0 197.29495790432844 -100 100 100 -184.97239873286648 -100 100 196.875 -150.0 -100) structure)&quot; &quot;(def network (position-to-nn '(-175.0 -150.0 197.29495790432844 -100 100 100 -184.97239873286648 -100 100 196.875 -150.0 -100) structure))&quot; &quot;(pso-nn t-in t-out structure 40 0.1 100)&quot; &quot;(pso-nn t-in t-out structure 40 0.1 500)&quot; &quot;(def t-out '((0) (0) (1) (1)))&quot; &quot;(pso-nn t-in t-out structure 40 0.01 500)&quot; &quot;network&quot; &quot;t-in&quot; &quot;(def t-out '((1) (0) (1) (1)))&quot; &quot;(def network (position-to-nn (get-position (pso-nn t-in t-out structure 40 0.01 500)) structure))&quot; &quot;(n/hypothesis '(1 1 1) network)&quot; &quot;(n/hypothesis '(1 1 0) network)&quot; &quot;(n/hypothesis '(1 0 0) network)&quot; &quot;(n/hypothesis '(1 0 1) network)&quot; &quot;(def network (position-to-nn (get-position (pso-nn t-in t-out structure 40 0.1 500)) structure))&quot; &quot;(conj [] [1 0 0])&quot; &quot;(format-csv-data \&quot;iris-data.csv\&quot;)&quot; &quot;(position-to-nn '(1 1.25 0.6312794114742657 1 -0.9937588513548362 -1 1.25 0.24027636440357344 -0.06819730493651711 -1.1181040278933634 0.6993294336398952 -1 -1 -0.6498384263944305 -0.8073183326367281 -1.25 -1.25 -0.8369075293335865 -1.25 1.25 1.2587467093134692 1.25 1.136822267824027 -0.6172833102895949 0.6694857402500214 1 -1 -1 -0.6869932403957505 1.1324445393624878 1 -0.7192759268533451 -0.2636315807592002 -1 1.305625169047162 -1.25 1 -0.21445904426190793 1 -0.1685199888958123 -1 1.25 -1.3125 1 1 -1.25 1.0297626210594357 -1.309463852273691 -1 -0.8174845189145452 1.3125 1.25 1 1 -1.25 -1 1 1 -1.25 1.1362992319760736 1.3125 1 -1 1 1 -0.4081095051834673 -1 1.25 1 -1 1 -1 0.1094860376891615 1 1 -0.6504050714087214 -1.328125 1.0450345718086644 -1.3125 0.112845242200812 1.25 1 0.19319642584548966 -1 1.3259258091242387 -1.25 -1 0.4838066866077563 -1 -0.1817550947171384 -1 1.25 0.42392366999533104 1 -1.0473605627448095 1.25 0.29934358696291463 1.3125 0.7154429675670221 -1.225639283557915 -1.0965343992368521 -1 -1 1 -1.232394657604655) '(5 10 5 1))&quot; &quot;(def network (position-to-nn '(1 1.25 0.6312794114742657 1 -0.9937588513548362 -1 1.25 0.24027636440357344 -0.06819730493651711 -1.1181040278933634 0.6993294336398952 -1 -1 -0.6498384263944305 -0.8073183326367281 -1.25 -1.25 -0.8369075293335865 -1.25 1.25 1.2587467093134692 1.25 1.136822267824027 -0.6172833102895949 0.6694857402500214 1 -1 -1 -0.6869932403957505 1.1324445393624878 1 -0.7192759268533451 -0.2636315807592002 -1 1.305625169047162 -1.25 1 -0.21445904426190793 1 -0.1685199888958123 -1 1.25 -1.3125 1 1 -1.25 1.0297626210594357 -1.309463852273691 -1 -0.8174845189145452 1.3125 1.25 1 1 -1.25 -1 1 1 -1.25 1.1362992319760736 1.3125 1 -1 1 1 -0.4081095051834673 -1 1.25 1 -1 1 -1 0.1094860376891615 1 1 -0.6504050714087214 -1.328125 1.0450345718086644 -1.3125 0.112845242200812 1.25 1 0.19319642584548966 -1 1.3259258091242387 -1.25 -1 0.4838066866077563 -1 -0.1817550947171384 -1 1.25 0.42392366999533104 1 -1.0473605627448095 1.25 0.29934358696291463 1.3125 0.7154429675670221 -1.225639283557915 -1.0965343992368521 -1 -1 1 -1.232394657604655) '(5 10 5 1)))&quot; &quot;(def iris-network (position-to-nn '(1 1.25 0.6312794114742657 1 -0.9937588513548362 -1 1.25 0.24027636440357344 -0.06819730493651711 -1.1181040278933634 0.6993294336398952 -1 -1 -0.6498384263944305 -0.8073183326367281 -1.25 -1.25 -0.8369075293335865 -1.25 1.25 1.2587467093134692 1.25 1.136822267824027 -0.6172833102895949 0.6694857402500214 1 -1 -1 -0.6869932403957505 1.1324445393624878 1 -0.7192759268533451 -0.2636315807592002 -1 1.305625169047162 -1.25 1 -0.21445904426190793 1 -0.1685199888958123 -1 1.25 -1.3125 1 1 -1.25 1.0297626210594357 -1.309463852273691 -1 -0.8174845189145452 1.3125 1.25 1 1 -1.25 -1 1 1 -1.25 1.1362992319760736 1.3125 1 -1 1 1 -0.4081095051834673 -1 1.25 1 -1 1 -1 0.1094860376891615 1 1 -0.6504050714087214 -1.328125 1.0450345718086644 -1.3125 0.112845242200812 1.25 1 0.19319642584548966 -1 1.3259258091242387 -1.25 -1 0.4838066866077563 -1 -0.1817550947171384 -1 1.25 0.42392366999533104 1 -1.0473605627448095 1.25 0.29934358696291463 1.3125 0.7154429675670221 -1.225639283557915 -1.0965343992368521 -1 -1 1 -1.232394657604655) '(5 10 5 1)))&quot; &quot;(def iris-network (position-to-nn '(-0.2156466438101598 1.2340033661122836 0.4015879156362201 1.3125 -1.190573897906791 -1 -0.2873621010445894 1 0.299620885847252 -1.25 -0.418156936191465 -0.6872442696885486 0.15899545907523333 -1 -1.1114463957076022 -0.802813991108417 0.08461558675926713 0.8365055787206707 -0.4550095078078216 -0.554971146238058 -0.8674265003097195 0.14385973107184175 1 1 -1 -0.7416120513152735 -1 1.0733597156274013 0.30217928791553483 1.1709760792339259) '(5 5 1))\n  )&quot; &quot;iris-network&quot; &quot;(iris-predictor iris-network)&quot; &quot;(/ 1 22.0)&quot; &quot;(par)&quot; &quot;(iris-test)&quot;], :remote []}}</component>
</project>

