<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1420505521732">{:repl-history {:ide [], :local [&quot;(conj l (vec (take 3 (drop 9 position))))&quot; &quot;(conj l (vec (list (take 3 (drop 9 position)))))&quot; &quot;(conj l (vec (partition 1 (take 3 (drop 9 position)))))&quot; &quot;(conj l (vec (partition 3 (take 3 (drop 9 position)))))&quot; &quot;(position-to-nn position structure)&quot; &quot;(n/hypothesis '(1 1 0) '(-30 20 20))&quot; &quot;(n/hypothesis [1 1 0] [[-30 20 20]])&quot; &quot;(def inputs '(1 1 0))&quot; &quot;(with-precision (n) 5)&quot; &quot;(with-precision 5 (n/neuron '(1 1 0) '(-30 20 20)))&quot; &quot;(with-precision 1 (n/neuron '(1 1 0) '(-30 20 20)))&quot; &quot;(n/hypothesis '(1 1 0) '((-30 20 20)))&quot; &quot;(n/hypothesis '(1 1 1) '((-30 20 20)))&quot; &quot;(n/neuron '(1 0 1) '(-30 20 20))&quot; &quot;(n/hypothesis '(1 0 1) '((-30 20 20)))&quot; &quot;(n/hypothesis '(1 0 1) '(((-30 20 20))))&quot; &quot;(n/hypothesis '(1 1 1) '(((-30 20 20))))&quot; &quot;(def network '(((-30 20 20) (10 -20 -20))\n                ((-10 20 20))))&quot; &quot;(n/hypothesis '(1 0 0) network)&quot; &quot;(n/hypothesis '(1 1 0) network)&quot; &quot;(n/hypothesis '(1 0 1) network)&quot; &quot;(n/hypothesis '(1 1 1) network)&quot; &quot;(def training-out '(0 1 1 0))&quot; &quot;(get-dimenstion structure)&quot; &quot;(get-dimension structure)&quot; &quot;(build-space 12)&quot; &quot;(p/generate-swarm 12 (build-space 12) (partial fitness training-in training-out structure))&quot; &quot;(p/generate-swarm 2 '([-1 1] [-1 1]) (partial apply +))&quot; &quot;(p/generate-swarm '([-1 1] [-1 1]) 2 (partial apply +))&quot; &quot;(p/generate-swarm (build-space 12) 40 (partial fitness training-in training-out structure))&quot; &quot;(defn random [low high]\n  (+ (rand (+ high (Math/abs low))) low))\n(def space (build-space 12))\n(map (fn [[min max]] (random min max)) space)&quot; &quot;(def swarm)&quot; &quot;(def swarm [(map (fn [[min max]] (random min max)) space)])&quot; &quot;(def position (map (fn [[min max]] (random min max)) space))&quot; &quot;(p/random-velocity space position)&quot; &quot;(def velocity (p/random-velocity space position))&quot; &quot;(def particle [1 velocity position])&quot; &quot;particle&quot; &quot;(def swarm [particle])&quot; &quot;swarm&quot; &quot;(p/generate-swarm (build-space 2) 3 (partial apply +))&quot; &quot;(p/update-fitness swarm (partial training-in training-out structure))&quot; &quot;(pprint cost)&quot; &quot;(clojure.pprint/pprint cost)&quot; &quot;(clojure.pprint/pprint n/cost)&quot; &quot;(n/cost '(0 1 1 0) '(0.5111368685774282 0.5006274376318193 0.5145844130883996 0.5037663015476643))&quot; &quot;(n/cost '((0) (1) (1) (0)) '((0.5111368685774282) (0.5006274376318193) (0.5145844130883996) (0.5037663015476643)))&quot; &quot;(def training-out (partition 1 training-out))&quot; &quot;training-out&quot; &quot;(require [nn.core :as n])&quot; &quot;(require '[nn.core :as n])&quot; &quot;(p/update-fitness swarm (partial fitness training-in training-out structure))&quot; &quot;(def training-out '((0) (1) (1) (0)))&quot; &quot;(def structure '(3 7 1))&quot; &quot;(n/cost '((0) (1) (1) (0)) \n        '((0.5968203084089552) \n           (0.5363851776320748) \n           (0.5964293747559468) \n           (0.5358556216071677)))&quot; &quot;(pso-nn training-in training-out structure 1000 0.1 100)&quot; &quot;(pso-nn training-in training-out structure 10 0.01 100)&quot; &quot;(pso-nn training-in training-out structure 10 0.7 100)&quot; &quot;(pso-nn training-in training-out structure 10 0.5 100)&quot; &quot;(pso-nn training-in training-out structure 1000 0.1 10)&quot; &quot;(pso-nn training-in training-out structure 100 0.1 10)&quot; &quot;(def structure '(3 20 1))&quot; &quot;(pso-nn training-in training-out structure 10 0.1 100)&quot; &quot;(pso-nn training-in training-out structure 40 0.1 50)&quot; &quot;(def structure '(3 3 1))&quot; &quot;(pso-nn training-in training-out structure 40 0.1 500)&quot; &quot;(def training-in '((1 0 0) (1 1 0) (1 0 1) (1 1 1)))&quot; &quot;(def training-out '((1) (0) (0) (1)))&quot; &quot;(def structure '(3 1))&quot; &quot;(pso-nn training-in training-out structure 40 0.1 300)&quot; &quot;(n/neuron '(1 1 0) '(((-30 20 20))))&quot; &quot;(n/neuron '(1 1 0) '((-30 20 20)))&quot; &quot;(n/neuron '(1 1 0) '(-30 20 20))&quot; &quot;(n/neuron '(1 1 1) '(-0.3 0.2 0.2))&quot; &quot;(n/neuron '(1 1 1) '(-3 2 2))&quot; &quot;(n/neuron '(1 1 1) '(-30 20 20))&quot; &quot;(pso-nn training-in training-out structure 40 0.1 30)&quot; &quot;(pso-nn training-in training-out structure 4 0.1 1)&quot; &quot;structure&quot; &quot;(- 1 -1.4)&quot; &quot;(-1 2)&quot; &quot;(- 1 2)&quot; &quot;(n/cost '((1) (0) (0) (1)) '((-1.5034292467957172E-23) (-3.6318596033901026E-63) (-1.0510712334431793E-35) (-2.5390906563535884E-75)))&quot; &quot;(pso-nn training-in training-out structure 40 0.1 100)&quot; &quot;(n/neuron '(1 1 1) '(35.33481946150896 -65.19100823522373 -55.933778985391555))&quot; &quot;(n/neuron '(1 1 0) '(35.33481946150896 -65.19100823522373 -55.933778985391555))&quot; &quot;(pso-nn training-in training-out structure 40 0.1 1000)&quot; &quot;(pso-nn training-in training-out structure 100 0.1 1000)&quot; &quot;(int (n/neuron '(1 1 1) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45)))&quot; &quot;(int (n/neuron '(1 1 0) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45)))&quot; &quot;(int 0.6)&quot; &quot;(int 0.7)&quot; &quot;(int 0.9)&quot; &quot;(n/neuron '(1 1 0) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45))&quot; &quot;(n/neuron '(1 1 1) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45))&quot; &quot;(n/neuron '(1 0 0) '(2.25490234047987E39 -3.8187116482256554E48 -7.763611495694678E45))&quot; &quot;(pso-nn training-in training-out structure 100 0.1 10000)&quot; &quot;(pso-nn training-in training-out structure 100 0.1 2000)&quot; &quot;(pso-nn training-in training-out structure 100 0.1 100)&quot; &quot;(pso-nn training-in training-out structure 300 0.1 100)&quot; &quot;(pso-nn training-in training-out structure 100 0.01 100)&quot;], :remote []}}</component>
</project>

